label=function(x){
  return(which(x==1))
}
set.seed(6666)
#K=5
m=rmultinom(20000, size = 1, prob = c(0.3,0.3,0.2,0.1,0.1))
#class labels
l=apply(m,2,label)
write.csv(l,'labels.csv',row.names = F)

# generate Multivariate normal
#generate covariance matrix from variances and correlations
generate_cov=function(x,rho){
  n=length(x)
  m=matrix(0,n,n)
  cm=combn(seq(1,n),2)
  offdiag=sqrt(x[cm[1,]]*x[cm[2,]])*rho
  diag(m)=x
  m[lower.tri(m, diag=F)]=offdiag
  return(pmax(m,t(m),na.rm=TRUE))
}
u1=sample(c(0.8,0.9,1),300,replace = T)
diag1=runif(300,min=0.05,0.1)
rho1=runif(150*299,min=-0.04,max=0.05)

cov1=generate_cov(diag1,rho1)

u2=sample(c(3.5,4,4.5,5,5.5,6,6.5),300,replace=T)
diag2=runif(300,min=0.2,max=1.5)
rho2=runif(150*299,min=-0.04,max=0.05)
cov2=generate_cov(diag2,rho2)

u3=sample(c(8,9,10,11,12),300,replace = T)
diag3=runif(300,min=0.5,max=4)
rho3=runif(150*299,min=-0.04,max=0.05)
cov3=generate_cov(diag3,rho3)

u4=sample(c(17,19,21,23,25),300,replace = T)
diag4=runif(300,min=1,max=6)
rho4=runif(150*299,min=-0.04,max=0.05)
cov4=generate_cov(diag4,rho4)

u5=sample(c(30,31,32,33,34,35),300,replace = T)
diag5=runif(300,min=1,max=9)
rho5=runif(150*299,min=-0.04,max=0.05)
cov5=generate_cov(diag5,rho5)

# u=list(u1,u2,u3,u4,u5)
# covmtrx=list(cov1,cov2,cov3,cov4,cov5)

 library(MASS)
# MVNM=function(l,U=u,COV=covmtrx){
#   return(t(mvrnorm(1,U[l], COV[l], tol = 1e-6)))
# }

data1=matrix(0,2*10^4,300)
for(i in 1:20000){
  if (l[i]==1) data1[i,]=mvrnorm(1,u1,cov1)
  else if (l[i]==2) data1[i,]=mvrnorm(1,u2,cov2)
  else if (l[i]==3) data1[i,]=mvrnorm(1,u3,cov3)
  else if (l[i]==4) data1[i,]=mvrnorm(1,u4,cov4)
  else data1[i,]=mvrnorm(1,u5,cov5)
}


write.csv(data1,file='MVN.csv',row.names=F,col.names=F)


#generate normal-inverse gamma
set.seed(6666)
theta1=c(0.9,100,3,0.5)
theta2=c(5,15,2,1)
theta3=c(10,4,2,1)
theta4=c(20,4,1,1)
theta5=c(30,1,1,1)

N_IG=function(u0,v,a,b){
  var=1/(rgamma(1,a,rate=b))
  u=rnorm(1,u0,sqrt(var/v))
  return(c(u,var))
}

para=matrix(0,20000,2)
for(i in 1:20000){
  if (l[i]==1) para[i,]=N_IG(theta1[1],theta1[2],theta1[3],theta1[4])
  else if (l[i]==2) para[i,]=N_IG(theta2[1],theta2[2],theta2[3],theta2[4])
  else if (l[i]==3) para[i,]=N_IG(theta3[1],theta3[2],theta3[3],theta3[4])
  else if (l[i]==4) para[i,]=N_IG(theta4[1],theta4[2],theta4[3],theta4[4])
  else para[i,]=N_IG(theta5[1],theta5[2],theta5[3],theta5[4])
}

rn=function(x){
  return(rnorm(300,x[1],sqrt(x[2])))
}
data2=t(apply(para,1,rn))
length(which(data2<=0))
write.csv(data2,file='N_IG.csv',row.names=F)


#generate data with normal inverse gamma prior with v=1
set.seed(123456)
theta1=c(0.9,1,3,0.1)
theta2=c(5,1,2,1)
theta3=c(10,1,2,1)
theta4=c(20,1,1,1)
theta5=c(30,1,1,1)

N_IG=function(u0,v,a,b){
  var=1/(rgamma(1,a,rate=b))
  u=rnorm(1,u0,sqrt(var/v))
  return(c(u,var))
}

para=matrix(0,20000,2)
for(i in 1:20000){
  if (l[i]==1) para[i,]=N_IG(theta1[1],theta1[2],theta1[3],theta1[4])
  else if (l[i]==2) para[i,]=N_IG(theta2[1],theta2[2],theta2[3],theta2[4])
  else if (l[i]==3) para[i,]=N_IG(theta3[1],theta3[2],theta3[3],theta3[4])
  else if (l[i]==4) para[i,]=N_IG(theta4[1],theta4[2],theta4[3],theta4[4])
  else para[i,]=N_IG(theta5[1],theta5[2],theta5[3],theta5[4])
}

rn=function(x){
  return(rnorm(100,x[1],sqrt(x[2])))
}

data3=t(apply(para,1,rn))
length(which(data3<=0))
write.csv(data3,file='N_IG_new1.csv',row.names=F)
